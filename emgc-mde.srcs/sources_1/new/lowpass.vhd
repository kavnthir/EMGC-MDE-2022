-- -------------------------------------------------------------
--
-- Module: lowpass
-- Generated by MATLAB(R) 9.13 and Filter Design HDL Coder 3.1.12.
-- Generated on: 2023-04-05 13:14:57
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ResetType: Synchronous
-- FIRAdderStyle: tree
-- OptimizeForHDL: on
-- ClockEnableInputPort: en
-- ResetInputPort: rst
-- UseRisingEdge: on
-- TargetDirectory: C:\Users\Max\moonStuff\matlabFilter
-- AddPipelineRegisters: on
-- InputPort: input_data
-- OutputPort: output_data
-- Name: lowpass
-- TestBenchStimulus: impulse step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 11
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,17 -> [-2.500000e-01 2.500000e-01)
-- Input             : s16,0 -> [-32768 32768)
-- Filter Internals  : Specify Precision
--   Output          : s16,0 -> [-32768 32768)
--   Product         : s31,0 -> [-1073741824 1073741824)
--   Accumulator     : s40,0 -> [-549755813888 549755813888)
--   Round Mode      : floor
--   Overflow Mode   : saturate
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY lowpass IS
   PORT( clk                             :   IN    std_logic; 
         en                              :   IN    std_logic; 
         rst                             :   IN    std_logic; 
         input_data                      :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16
         output_data                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16
         );

END lowpass;


----------------------------------------------------------------
--Module Architecture: lowpass
----------------------------------------------------------------
ARCHITECTURE rtl OF lowpass IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(800, 16); -- sfix16_En17
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(17470, 16); -- sfix16_En17
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(13137, 16); -- sfix16_En17
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(16701, 16); -- sfix16_En17
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(18832, 16); -- sfix16_En17
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(19591, 16); -- sfix16_En17
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(18832, 16); -- sfix16_En17
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(16701, 16); -- sfix16_En17
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(13137, 16); -- sfix16_En17
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(17470, 16); -- sfix16_En17
  CONSTANT coeff11                        : signed(15 DOWNTO 0) := to_signed(800, 16); -- sfix16_En17

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 10); -- sfix16
  SIGNAL product11                        : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp                         : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product10                        : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_1                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product9                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_2                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product8                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_3                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product7                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_4                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product6                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_5                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product5                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_6                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product4                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_7                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product3                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_8                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product2                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_9                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product1                         : signed(30 DOWNTO 0); -- sfix31
  SIGNAL mul_temp_10                      : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL sum_final                        : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum1_1                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp                         : signed(31 DOWNTO 0); -- sfix32
  SIGNAL sumpipe1_1                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum1_2                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_1                       : signed(31 DOWNTO 0); -- sfix32
  SIGNAL sumpipe1_2                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum1_3                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_2                       : signed(31 DOWNTO 0); -- sfix32
  SIGNAL sumpipe1_3                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum1_4                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_3                       : signed(31 DOWNTO 0); -- sfix32
  SIGNAL sumpipe1_4                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum1_5                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_4                       : signed(31 DOWNTO 0); -- sfix32
  SIGNAL sumpipe1_5                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sumpipe1_6                       : signed(30 DOWNTO 0); -- sfix31
  SIGNAL sum2_1                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_5                       : signed(40 DOWNTO 0); -- sfix41
  SIGNAL sumpipe2_1                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum2_2                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_6                       : signed(40 DOWNTO 0); -- sfix41
  SIGNAL sumpipe2_2                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum2_3                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_7                       : signed(40 DOWNTO 0); -- sfix41
  SIGNAL sumpipe2_3                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum3_1                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_8                       : signed(40 DOWNTO 0); -- sfix41
  SIGNAL sumpipe3_1                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sumpipe3_2                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL sum4_1                           : signed(39 DOWNTO 0); -- sfix40
  SIGNAL add_temp_9                       : signed(40 DOWNTO 0); -- sfix41
  SIGNAL sumpipe4_1                       : signed(39 DOWNTO 0); -- sfix40
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16

  SIGNAL input_typeconvert                : signed(15 DOWNTO 0);

BEGIN

  input_typeconvert <= shift_left(signed(input_data), 3);

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF rst = '1' THEN
        delay_pipeline(0 TO 10) <= (OTHERS => input_typeconvert);
      ELSIF en = '1' THEN
        delay_pipeline(0) <= input_typeconvert;
        delay_pipeline(1 TO 10) <= delay_pipeline(0 TO 9);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(10) * coeff11;
  product11 <= resize(mul_temp(31 DOWNTO 17), 31);

  mul_temp_1 <= delay_pipeline(9) * coeff10;
  product10 <= resize(mul_temp_1(31 DOWNTO 17), 31);

  mul_temp_2 <= delay_pipeline(8) * coeff9;
  product9 <= resize(mul_temp_2(31 DOWNTO 17), 31);

  mul_temp_3 <= delay_pipeline(7) * coeff8;
  product8 <= resize(mul_temp_3(31 DOWNTO 17), 31);

  mul_temp_4 <= delay_pipeline(6) * coeff7;
  product7 <= resize(mul_temp_4(31 DOWNTO 17), 31);

  mul_temp_5 <= delay_pipeline(5) * coeff6;
  product6 <= resize(mul_temp_5(31 DOWNTO 17), 31);

  mul_temp_6 <= delay_pipeline(4) * coeff5;
  product5 <= resize(mul_temp_6(31 DOWNTO 17), 31);

  mul_temp_7 <= delay_pipeline(3) * coeff4;
  product4 <= resize(mul_temp_7(31 DOWNTO 17), 31);

  mul_temp_8 <= delay_pipeline(2) * coeff3;
  product3 <= resize(mul_temp_8(31 DOWNTO 17), 31);

  mul_temp_9 <= delay_pipeline(1) * coeff2;
  product2 <= resize(mul_temp_9(31 DOWNTO 17), 31);

  mul_temp_10 <= delay_pipeline(0) * coeff1;
  product1 <= resize(mul_temp_10(31 DOWNTO 17), 31);

  add_temp <= resize(product11, 32) + resize(product10, 32);
  sum1_1 <= resize(add_temp, 40);

  add_temp_1 <= resize(product9, 32) + resize(product8, 32);
  sum1_2 <= resize(add_temp_1, 40);

  add_temp_2 <= resize(product7, 32) + resize(product6, 32);
  sum1_3 <= resize(add_temp_2, 40);

  add_temp_3 <= resize(product5, 32) + resize(product4, 32);
  sum1_4 <= resize(add_temp_3, 40);

  add_temp_4 <= resize(product3, 32) + resize(product2, 32);
  sum1_5 <= resize(add_temp_4, 40);

  temp_process1 : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF rst = '1' THEN
        sumpipe1_1 <= (OTHERS => '0');
        sumpipe1_2 <= (OTHERS => '0');
        sumpipe1_3 <= (OTHERS => '0');
        sumpipe1_4 <= (OTHERS => '0');
        sumpipe1_5 <= (OTHERS => '0');
        sumpipe1_6 <= (OTHERS => '0');
      ELSIF en = '1' THEN
        sumpipe1_1 <= sum1_1;
        sumpipe1_2 <= sum1_2;
        sumpipe1_3 <= sum1_3;
        sumpipe1_4 <= sum1_4;
        sumpipe1_5 <= sum1_5;
        sumpipe1_6 <= product1;
      END IF;
    END IF; 
  END PROCESS temp_process1;

  add_temp_5 <= resize(sumpipe1_1, 41) + resize(sumpipe1_2, 41);
  sum2_1 <= (39 => '0', OTHERS => '1') WHEN add_temp_5(40) = '0' AND add_temp_5(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_5(40) = '1' AND add_temp_5(39) /= '1'
      ELSE (add_temp_5(39 DOWNTO 0));

  add_temp_6 <= resize(sumpipe1_3, 41) + resize(sumpipe1_4, 41);
  sum2_2 <= (39 => '0', OTHERS => '1') WHEN add_temp_6(40) = '0' AND add_temp_6(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_6(40) = '1' AND add_temp_6(39) /= '1'
      ELSE (add_temp_6(39 DOWNTO 0));

  add_temp_7 <= resize(sumpipe1_5, 41) + resize(sumpipe1_6, 41);
  sum2_3 <= (39 => '0', OTHERS => '1') WHEN add_temp_7(40) = '0' AND add_temp_7(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_7(40) = '1' AND add_temp_7(39) /= '1'
      ELSE (add_temp_7(39 DOWNTO 0));

  temp_process2 : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF rst = '1' THEN
        sumpipe2_1 <= (OTHERS => '0');
        sumpipe2_2 <= (OTHERS => '0');
        sumpipe2_3 <= (OTHERS => '0');
      ELSIF en = '1' THEN
        sumpipe2_1 <= sum2_1;
        sumpipe2_2 <= sum2_2;
        sumpipe2_3 <= sum2_3;
      END IF;
    END IF; 
  END PROCESS temp_process2;

  add_temp_8 <= resize(sumpipe2_1, 41) + resize(sumpipe2_2, 41);
  sum3_1 <= (39 => '0', OTHERS => '1') WHEN add_temp_8(40) = '0' AND add_temp_8(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_8(40) = '1' AND add_temp_8(39) /= '1'
      ELSE (add_temp_8(39 DOWNTO 0));

  temp_process3 : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF rst = '1' THEN
        sumpipe3_1 <= (OTHERS => '0');
        sumpipe3_2 <= (OTHERS => '0');
      ELSIF en = '1' THEN
        sumpipe3_1 <= sum3_1;
        sumpipe3_2 <= sumpipe2_3;
      END IF;
    END IF; 
  END PROCESS temp_process3;

  add_temp_9 <= resize(sumpipe3_1, 41) + resize(sumpipe3_2, 41);
  sum4_1 <= (39 => '0', OTHERS => '1') WHEN add_temp_9(40) = '0' AND add_temp_9(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_9(40) = '1' AND add_temp_9(39) /= '1'
      ELSE (add_temp_9(39 DOWNTO 0));

  temp_process4 : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF rst = '1' THEN
        sumpipe4_1 <= (OTHERS => '0');
      ELSIF en = '1' THEN
        sumpipe4_1 <= sum4_1;
      END IF;
    END IF; 
  END PROCESS temp_process4;

  sum_final <= sumpipe4_1;

  output_typeconvert <= (15 => '0', OTHERS => '1') WHEN sum_final(39) = '0' AND sum_final(38 DOWNTO 15) /= "000000000000000000000000"
      ELSE (15 => '1', OTHERS => '0') WHEN sum_final(39) = '1' AND sum_final(38 DOWNTO 15) /= "111111111111111111111111"
      ELSE (sum_final(15 DOWNTO 0));

  Output_Register_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF rst = '1' THEN
        output_register <= (OTHERS => '0');
      ELSIF en = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  output_data <= std_logic_vector(shift_right(output_register, 3));
END rtl;
