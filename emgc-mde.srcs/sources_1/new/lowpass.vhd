-- -------------------------------------------------------------
--
-- Module: lowpass
-- Generated by MATLAB(R) 9.13 and Filter Design HDL Coder 3.1.12.
-- Generated on: 2023-02-17 11:39:01
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ResetType: Synchronous
-- OptimizeForHDL: on
-- ClockEnableInputPort: en
-- ResetInputPort: rst
-- TargetDirectory: C:\Users\Max\moonStuff\matlabFilter
-- InputPort: input_data
-- OutputPort: output_data
-- Name: lowpass
-- TestBenchStimulus: impulse step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 11
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,17 -> [-2.500000e-01 2.500000e-01)
-- Input             : s16,4 -> [-2048 2048)
-- Filter Internals  : Specify Precision
--   Output          : s16,4 -> [-2048 2048)
--   Product         : s31,31 -> [-5.000000e-01 5.000000e-01)
--   Accumulator     : s40,31 -> [-256 256)
--   Round Mode      : floor
--   Overflow Mode   : saturate
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY lowpass IS
   PORT( clk                             :   IN    std_logic; 
         en                              :   IN    std_logic; 
         rst                             :   IN    std_logic; 
         input_data                      :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En4
         output_data                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En4
         );

END lowpass;


----------------------------------------------------------------
--Module Architecture: lowpass
----------------------------------------------------------------
ARCHITECTURE rtl OF lowpass IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En4
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(4935, 16); -- sfix16_En17
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(8796, 16); -- sfix16_En17
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(12787, 16); -- sfix16_En17
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(16272, 16); -- sfix16_En17
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(18652, 16); -- sfix16_En17
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(19497, 16); -- sfix16_En17
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(18652, 16); -- sfix16_En17
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(16272, 16); -- sfix16_En17
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(12787, 16); -- sfix16_En17
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(8796, 16); -- sfix16_En17
  CONSTANT coeff11                        : signed(15 DOWNTO 0) := to_signed(4935, 16); -- sfix16_En17

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 10); -- sfix16_En4
  SIGNAL product11                        : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp                         : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product10                        : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_1                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product9                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_2                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product8                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_3                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product7                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_4                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product6                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_5                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product5                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_6                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product4                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_7                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product3                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_8                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product2                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_9                       : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL product1                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_10                      : signed(31 DOWNTO 0); -- sfix32_En21
  SIGNAL sum1                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL sum2                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_1                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum3                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_2                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum4                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_3                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum5                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_4                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum6                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_5                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum7                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_6                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum8                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_7                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum9                             : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_8                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL sum10                            : signed(39 DOWNTO 0); -- sfix40_En31
  SIGNAL add_temp_9                       : signed(40 DOWNTO 0); -- sfix41_En31
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En4
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En4
  SIGNAL rst_wire                  : signed(15 DOWNTO 0);
  
  SIGNAL count : std_logic_vector(3 DOWNTO 0);
  SIGNAL countR : std_logic;

BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF rst = '1' THEN
        --delay_pipeline(0 TO 10) <= (OTHERS => (OTHERS => '0'));
		--delay_pipeline(0) <= signed(input_data);
		--delay_pipeline(1 TO 10) <= (OTHERS => (OTHERS => '0'));
		delay_pipeline(0 TO 10) <= (OTHERS => signed(input_data));
		
      ELSIF en = '1' THEN
        delay_pipeline(0) <= signed(input_data);
        delay_pipeline(1 TO 10) <= delay_pipeline(0 TO 9);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(10) * coeff11;
  product11 <= (30 => '0', OTHERS => '1') WHEN mul_temp(31) = '0' AND mul_temp(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp(31) = '1' AND mul_temp(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_1 <= delay_pipeline(9) * coeff10;
  product10 <= (30 => '0', OTHERS => '1') WHEN mul_temp_1(31) = '0' AND mul_temp_1(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_1(31) = '1' AND mul_temp_1(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_2 <= delay_pipeline(8) * coeff9;
  product9 <= (30 => '0', OTHERS => '1') WHEN mul_temp_2(31) = '0' AND mul_temp_2(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_2(31) = '1' AND mul_temp_2(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_3 <= delay_pipeline(7) * coeff8;
  product8 <= (30 => '0', OTHERS => '1') WHEN mul_temp_3(31) = '0' AND mul_temp_3(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_3(31) = '1' AND mul_temp_3(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_4 <= delay_pipeline(6) * coeff7;
  product7 <= (30 => '0', OTHERS => '1') WHEN mul_temp_4(31) = '0' AND mul_temp_4(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_4(31) = '1' AND mul_temp_4(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_5 <= delay_pipeline(5) * coeff6;
  product6 <= (30 => '0', OTHERS => '1') WHEN mul_temp_5(31) = '0' AND mul_temp_5(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_5(31) = '1' AND mul_temp_5(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_6 <= delay_pipeline(4) * coeff5;
  product5 <= (30 => '0', OTHERS => '1') WHEN mul_temp_6(31) = '0' AND mul_temp_6(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_6(31) = '1' AND mul_temp_6(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_7 <= delay_pipeline(3) * coeff4;
  product4 <= (30 => '0', OTHERS => '1') WHEN mul_temp_7(31) = '0' AND mul_temp_7(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_7(31) = '1' AND mul_temp_7(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_8 <= delay_pipeline(2) * coeff3;
  product3 <= (30 => '0', OTHERS => '1') WHEN mul_temp_8(31) = '0' AND mul_temp_8(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_8(31) = '1' AND mul_temp_8(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_9 <= delay_pipeline(1) * coeff2;
  product2 <= (30 => '0', OTHERS => '1') WHEN mul_temp_9(31) = '0' AND mul_temp_9(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_9(31) = '1' AND mul_temp_9(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  mul_temp_10 <= delay_pipeline(0) * coeff1;
  product1 <= (30 => '0', OTHERS => '1') WHEN mul_temp_10(31) = '0' AND mul_temp_10(30 DOWNTO 20) /= "00000000000"
      ELSE (30 => '1', OTHERS => '0') WHEN mul_temp_10(31) = '1' AND mul_temp_10(30 DOWNTO 20) /= "11111111111"
      ELSE (resize(mul_temp_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31));

  add_temp <= resize(product1, 32) + resize(product2, 32);
  sum1 <= resize(add_temp, 40);

  add_temp_1 <= resize(sum1, 41) + resize(product3, 41);
  sum2 <= (39 => '0', OTHERS => '1') WHEN add_temp_1(40) = '0' AND add_temp_1(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_1(40) = '1' AND add_temp_1(39) /= '1'
      ELSE (add_temp_1(39 DOWNTO 0));

  add_temp_2 <= resize(sum2, 41) + resize(product4, 41);
  sum3 <= (39 => '0', OTHERS => '1') WHEN add_temp_2(40) = '0' AND add_temp_2(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_2(40) = '1' AND add_temp_2(39) /= '1'
      ELSE (add_temp_2(39 DOWNTO 0));

  add_temp_3 <= resize(sum3, 41) + resize(product5, 41);
  sum4 <= (39 => '0', OTHERS => '1') WHEN add_temp_3(40) = '0' AND add_temp_3(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_3(40) = '1' AND add_temp_3(39) /= '1'
      ELSE (add_temp_3(39 DOWNTO 0));

  add_temp_4 <= resize(sum4, 41) + resize(product6, 41);
  sum5 <= (39 => '0', OTHERS => '1') WHEN add_temp_4(40) = '0' AND add_temp_4(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_4(40) = '1' AND add_temp_4(39) /= '1'
      ELSE (add_temp_4(39 DOWNTO 0));

  add_temp_5 <= resize(sum5, 41) + resize(product7, 41);
  sum6 <= (39 => '0', OTHERS => '1') WHEN add_temp_5(40) = '0' AND add_temp_5(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_5(40) = '1' AND add_temp_5(39) /= '1'
      ELSE (add_temp_5(39 DOWNTO 0));

  add_temp_6 <= resize(sum6, 41) + resize(product8, 41);
  sum7 <= (39 => '0', OTHERS => '1') WHEN add_temp_6(40) = '0' AND add_temp_6(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_6(40) = '1' AND add_temp_6(39) /= '1'
      ELSE (add_temp_6(39 DOWNTO 0));

  add_temp_7 <= resize(sum7, 41) + resize(product9, 41);
  sum8 <= (39 => '0', OTHERS => '1') WHEN add_temp_7(40) = '0' AND add_temp_7(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_7(40) = '1' AND add_temp_7(39) /= '1'
      ELSE (add_temp_7(39 DOWNTO 0));

  add_temp_8 <= resize(sum8, 41) + resize(product10, 41);
  sum9 <= (39 => '0', OTHERS => '1') WHEN add_temp_8(40) = '0' AND add_temp_8(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_8(40) = '1' AND add_temp_8(39) /= '1'
      ELSE (add_temp_8(39 DOWNTO 0));

  add_temp_9 <= resize(sum9, 41) + resize(product11, 41);
  sum10 <= (39 => '0', OTHERS => '1') WHEN add_temp_9(40) = '0' AND add_temp_9(39) /= '0'
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_9(40) = '1' AND add_temp_9(39) /= '1'
      ELSE (add_temp_9(39 DOWNTO 0));

  output_typeconvert <= resize(sum10(39 DOWNTO 27), 16);
  
  --UP_COUNTER port map (clk => clk, reset=>countR, counter => count);
  
  Output_Register_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF rst = '1' THEN
       output_register <= (OTHERS => '0');
	--output_register <= signed(input_data);
      ELSIF en = '1' THEN
	  --rst_wire <= (OTHERS => rst);
	  --output_register <= (OTHERS => (output_typeconvert AND rst));
       output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  
  --process begin
  --IF rst = '1' THEN
    --output_data <= (OTHERS => '0');
	--output_register <= signed(input_data);
  --ELSIF en = '1' THEN
        --output_data <= std_logic_vector(output_register);
  --END IF;
  --end process;
  
  output_data <= std_logic_vector(output_register);
  
  --output_data <= std_logic_vector(output_register);
END rtl;





